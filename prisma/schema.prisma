generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model comments {
  id            Int      @id(map: "comments_id_pkey") @unique @default(autoincrement())
  comment       String   @db.VarChar(511)
  createdAt     DateTime @default(now()) @db.Timestamp(6)
  userId        Int
  postId        Int
  numberOfLikes Int?     @default(0)
  posts         posts    @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users         users    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model posts {
  id            Int        @id(map: "posts_id_pkey") @unique @default(autoincrement())
  title         String     @db.VarChar(255)
  description   String?
  userId        Int
  url           String?    @unique(map: "posts_url_unique")
  createdAt     DateTime   @default(now()) @db.Timestamp(6)
  numberOfLikes Int?       @default(0)
  commentIds    Int[]
  comments      comments[]
  users         users      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model users {
  id                                 Int        @id(map: "users_id_pkey") @unique @default(autoincrement())
  fullName                           String     @db.VarChar(255)
  email                              String     @unique @db.VarChar(255)
  password                           String     @db.VarChar(255)
  bio                                String?    @default("I love LimeLink!")
  avatar                             String?    @db.VarChar(511)
  interests                          String[]   @db.VarChar(255)
  birthDate                          DateTime?  @db.Date
  isPrivate                          Boolean    @default(false)
  isOnline                           Boolean    @default(false)
  postIds                            Int[]
  comments                           comments[]
  follows_follows_followerIdTousers  follows[]  @relation("follows_followerIdTousers")
  follows_follows_followingIdTousers follows[]  @relation("follows_followingIdTousers")
  posts                              posts[]
}

model follows {
  followerId                       Int
  followingId                      Int
  users_follows_followerIdTousers  users @relation("follows_followerIdTousers", fields: [followerId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users_follows_followingIdTousers users @relation("follows_followingIdTousers", fields: [followingId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([followerId, followingId], map: "follows_followerId_followingId_pkey")
}
